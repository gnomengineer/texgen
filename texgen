#!/bin/bash

usage()
{
    echo ""
    echo "Usage: texgen [-s|-b|--plain| [--custom TEMPLATE] ] [-g,-L,--no-library] [-p, [--language LANG] ] NAME"
    echo ""
    echo "generates a folder called NAME with a NAME.tex file based on templates in it."
    echo ""
    echo "TEMPLATE OPTIONS"
    echo " -b, --beamer      : adds the template for a beamer class"
    echo " -s, --scientific  : adds a scientific article template"
    echo " --plain           : adds a plain article class. (default)"
    echo " --custom=TEMPLATE : adds a custom template"
    echo ""
    echo "STYLE OPTIONS"
    echo " -g, --git         : adds a git.sty package to the .tex file"
    echo " -L, --layout      : adds a layout.sty package to the .tex file"
    echo " --no-library      : omits to add a custom.sty package to the .tex file"
    echo ""
    echo "OTHER OPTIONS"
    echo " -p, --project     : adds the selected template into a 'doc' folder instead"
    echo " --language=LANG   : adds selected translation of given template instead"
    echo " -v, --version     : prints the version of texgen"
    echo ""
}

version()
{
    echo "texgen 4.0 (beta) - by Daniel Foehn aka Gnomengineer"
}

error()
{
    echo " [EE] - Error: $1";
    exit
}

info()
{
    echo " [II] - Info: $1";
}

command=$(basename $0)

if [ $# -eq 0 ] 
then
    error "no parameter given. see $command -h for help"
fi

template_dir=/usr/share/texgen/template
custom_style="custom.sty"
page_style="layout.sty"
git_style="git.sty"

template='plain'
usesGit=false
usesLayout=false
usesProject=false
usesLanguage=false
usesLib=true

while [ "$1" != "" ]
do
    case $1 in
        -h | --help)
            usage;
            exit;
            ;;
        -v | --version)
            version;
            exit;
            ;;
        -b | --beamer)
            template='beamer'
            ;;
        -s | --scientific)
            template='scientific'
            ;;
        --custom)
            shift
            template=$1
            ;;
        -g | --git)
            usesGit=true
            ;;
        -L | --layout)
            usesLayout=true
            ;;
        --no-library)
            usesLib=false
            ;;
        -p | --project)
            usesProject=true
            ;;
        --language)
            usesLanguage=true
            shift
            language=$1
            ;;
        *)
            if [ $# -eq 1 ]
            then
                documentname=$1;
                folder=$1;
            fi
            ;;
    esac
    shift
done

if [ "$folder" == "" ]
then
    error "you need to give a directory name"
fi

if [ $project -eq 1 ]
then
    folder="doc"
fi

if [ $usesLanguage ]
then
    template=$template$language
fi

mkdir $folder

if test -d $folder
then
    cd $folder 

    if [ $sysspec -eq 1 ]
    then
        filename="SysSpec_$documentname"
    else
        filename=$documentname
    fi

    cp $template_dir/$file $filename.tex
    if [ "$pmp" != "" ]
    then
        cp $template_dir/$pmp "PMP_$documentname.tex"
    fi
    cp $template_dir/$custom_style $custom_style
    cp $template_dir/$page_style $page_style

    info "latex structure successfully created!"
else
    error "folder could not be created" 
fi
